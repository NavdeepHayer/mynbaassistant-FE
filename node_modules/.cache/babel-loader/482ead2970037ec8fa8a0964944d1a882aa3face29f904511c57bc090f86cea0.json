{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TeamsTab',\n  data() {\n    return {\n      teams: [],\n      isFlipped: {},\n      selectedTeamPlayers: {}\n    };\n  },\n  async created() {\n    this.fetchTeams();\n  },\n  methods: {\n    async fetchTeams() {\n      try {\n        const response = await axios.get('https://api.mynbaassistant.com/api/teams', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.teams = response.data;\n      } catch (error) {\n        console.error('Error fetching NBA teams:', error);\n      }\n    },\n    async fetchPlayersByTeam(teamId) {\n      try {\n        const response = await axios.get(`https://api.mynbaassistant.com/api/teams/${teamId}/players`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.$set(this.selectedTeamPlayers, teamId, response.data);\n      } catch (error) {\n        console.error('Error fetching players for the team:', error);\n      }\n    },\n    async toggleCard(teamId) {\n      if (!this.selectedTeamPlayers[teamId]) {\n        await this.fetchPlayersByTeam(teamId);\n      }\n      this.$set(this.isFlipped, teamId, !this.isFlipped[teamId]);\n    },\n    selectPlayer(player) {\n      this.$emit('select-player', player);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","teams","isFlipped","selectedTeamPlayers","created","fetchTeams","methods","response","get","headers","Authorization","localStorage","getItem","error","console","fetchPlayersByTeam","teamId","$set","toggleCard","selectPlayer","player","$emit"],"sources":["/Users/navdeep/Documents/Github/mynbaassistant-FE/src/views/TeamsTab.vue"],"sourcesContent":["<template>\n  <div class=\"teams-tab container\">\n    <h2 class=\"text-center my-4\">NBA Teams</h2>\n    <div class=\"row\">\n      <div v-for=\"team in teams\" :key=\"team.team_id\" class=\"col-md-4 mb-4\">\n        <div class=\"card bg-dark text-white\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ team.city }} {{ team.nickname }}</h5>\n            <p class=\"card-text\">{{ team.conference }} - {{ team.division }}</p>\n            <button class=\"btn btn-primary\" @click=\"toggleCard(team.team_id)\">\n              View Players\n            </button>\n            <div v-if=\"isFlipped[team.team_id]\" class=\"player-list mt-3\">\n              <ul class=\"list-group\">\n                <li\n                  v-for=\"player in selectedTeamPlayers[team.team_id]\"\n                  :key=\"player.id\"\n                  @click=\"selectPlayer(player)\"\n                  class=\"list-group-item list-group-item-action\"\n                >\n                  {{ player.full_name }}\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'TeamsTab',\n  data() {\n    return {\n      teams: [],\n      isFlipped: {},\n      selectedTeamPlayers: {},\n    };\n  },\n  async created() {\n    this.fetchTeams();\n  },\n  methods: {\n    async fetchTeams() {\n      try {\n        const response = await axios.get('https://api.mynbaassistant.com/api/teams', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        });\n        this.teams = response.data;\n      } catch (error) {\n        console.error('Error fetching NBA teams:', error);\n      }\n    },\n    async fetchPlayersByTeam(teamId) {\n      try {\n        const response = await axios.get(`https://api.mynbaassistant.com/api/teams/${teamId}/players`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        });\n        this.$set(this.selectedTeamPlayers, teamId, response.data);\n      } catch (error) {\n        console.error('Error fetching players for the team:', error);\n      }\n    },\n    async toggleCard(teamId) {\n      if (!this.selectedTeamPlayers[teamId]) {\n        await this.fetchPlayersByTeam(teamId);\n      }\n      this.$set(this.isFlipped, teamId, !this.isFlipped[teamId]);\n    },\n    selectPlayer(player) {\n      this.$emit('select-player', player);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.card {\n  background-color: #333;\n  color: #fff;\n}\n\n.card-title, .card-text {\n  color: #fff;\n}\n\n.list-group-item {\n  cursor: pointer;\n  background-color: #2a2a2a;\n  color: #fff;\n}\n\n.list-group-item:hover {\n  background-color: #444;\n}\n\n.player-list {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"AAgCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,CAAC,CAAC;MACbC,mBAAmB,EAAE,CAAC;IACxB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,0CAA0C,EAAE;UAC3EC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD;QACF,CAAC,CAAC;QACF,IAAI,CAACX,KAAI,GAAIM,QAAQ,CAACP,IAAI;MAC5B,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IACD,MAAME,kBAAkBA,CAACC,MAAM,EAAE;MAC/B,IAAI;QACF,MAAMT,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,4CAA4CQ,MAAM,UAAU,EAAE;UAC7FP,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD;QACF,CAAC,CAAC;QACF,IAAI,CAACK,IAAI,CAAC,IAAI,CAACd,mBAAmB,EAAEa,MAAM,EAAET,QAAQ,CAACP,IAAI,CAAC;MAC5D,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IACD,MAAMK,UAAUA,CAACF,MAAM,EAAE;MACvB,IAAI,CAAC,IAAI,CAACb,mBAAmB,CAACa,MAAM,CAAC,EAAE;QACrC,MAAM,IAAI,CAACD,kBAAkB,CAACC,MAAM,CAAC;MACvC;MACA,IAAI,CAACC,IAAI,CAAC,IAAI,CAACf,SAAS,EAAEc,MAAM,EAAE,CAAC,IAAI,CAACd,SAAS,CAACc,MAAM,CAAC,CAAC;IAC5D,CAAC;IACDG,YAAYA,CAACC,MAAM,EAAE;MACnB,IAAI,CAACC,KAAK,CAAC,eAAe,EAAED,MAAM,CAAC;IACrC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}